// This file is part of coursework 2 for COMP1212
// which follows the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// Written by Sam Wilson


/**
 * The ALU. Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * The bit-combinations that yield each function are
 * documented in the book. In addition, the ALU
 * computes two 1-bit outputs: if the ALU output
 * is 0, zr is set to 1; otherwise zr is set to 0;
 * If out<0, ng is set to 1; otherwise ng is set to 0.
 */

CHIP ALU {
    IN x[16], y[16], zx, nx, zy, ny, f, no;
    OUT out[16], zr, ng;

    PARTS:
        //X

        Mux16(x=x, y=false, sel=zx, out=tempX);
        Not16(x=tempX, out=ntempx);
        Mux16(x=tempX, y=ntempx, sel=nx, out=inputx);

        //Y

        Mux16(x=y, y=false, sel=zy, out=tempy);
        Not16(x=tempy, out=ntempy);
        Mux16(x=tempy, y=ntempy, sel=ny, out=inputy);

        //FBit
        And16(x=inputx, y=inputy, out=tempFBit1);
        Add16(x=inputx, y=inputy, out=tempFBit2);
        Mux16(x=tempFBit1, y=tempFBit2, sel=f, out=fBitOut);

        //Out
        Not16(x=fBitOut, out=nfBitOut);
        Mux16(x=fBitOut, y=nfBitOut, sel=no, out[15]=ng, out[0..7]=inOr1, out[8..15]=inOr2, out=out);
        Not(x=nzr, out=zr);
        Or(x=temp1, y=temp2, out=nzr);
        Or8Way(x=inOr1, out=temp1);
        Or8Way(x=inOr2, out=temp2);




}
