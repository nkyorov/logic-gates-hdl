// This file is part of coursework 2 for COMP1212
// which follows the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// Written by Sam Wilson

/**
 * The complete address space of the computer's memory,
 * including RAM and memory mapped I/O.
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: If load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory
 * location specified by address. If load=1, the in value is loaded
 * into the memory location specified by address. This value becomes
 * available through the out output in the next time step.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used.
 * Access to address>0x6000 is invalid. Access to any address in
 * the range 0x4000-0x5FFF results in accessing the screen memory
 * map. Access to address 0x6000 results in accessing the keyboard
 * memory map. The behavior in these addresses is described in the
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    DMux4Way (in=load, sel=address[13..14], w=load0, x=load1, y=loadScreen);
    Or       (x=load0, y=load1, out=loadRAM);
    RAM16K   (x=in, load=loadRAM, address=address[0..13], out=ramOut);
    Screen   (in=in, load=loadScreen, address=address[0..12], out=screenOut);

    // check if keyboard address - 0x6000 = 110 0000 0000 0000
    And    (x=address[13], y=address[14], out=and1314);
    Or8Way (x=address[0..7], out=or0to7);
    Or8Way (x=address[5..12], out=or5to12);
    Or     (x=or0to7, y=or5to12, out=or0to12);
    Not    (x=or0to12, out=zero0to12);
    And    (x=zero0to12, y=and1314, out=keyAddress);

    // if keyboard address, output keyboard contents
    Keyboard  (out=key);
    Mux16     (x=false, y=key, sel=keyAddress, out=keyOut);
    Mux4Way16 (w=ramOut, x=ramOut, y=screenOut, z=keyOut, sel=address[13..14], out=out);
}
