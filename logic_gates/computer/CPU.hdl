// This file is part of coursework 2 for COMP1212
// which follows the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// Written by Sam Wilson

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM=0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time unit. If reset=1 then the
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //Decoder
    Not(x = instruction[15], out= aInst);
    And(x= instruction[15],y=instruction[14],out=temp1);
    And(x=temp1,y=instruction[13], out=cInstr);
    And(x=cInstr,y=instruction[12], out=srcM);
    And(x=cInstr,y=instruction[11], out = aluZx);
    And(x=cInstr,y=instruction[10], out = aluNx);
    And(x=cInstr,y=instruction[9], out = aluZy);
    And(x=cInstr,y=instruction[8], out = aluNy);
    And(x=cInstr,y=instruction[7], out = aluF);
    And(x=cInstr,y=instruction[6], out = aluNO);
    And(x=cInstr,y=instruction[5], out = destA);
    And(x=cInstr,y=instruction[4], out = destD);
    And(x=cInstr,y=instruction[3], out = writeM);
    And(x=cInstr,y=instruction[2], out = JmpLT);
    And(x=cInstr,y=instruction[1], out = JmpEQ);
    And(x=cInstr,y=instruction[0], out = JmpGT);
    //End Decoder

    //Jumps
    And(x=aluNg,y=aluNg,out=temp2);
    Not(x=temp2,out=aluPos);
    And(x=aluNg,y=JmpLT,out=jlt);
    And(x=aluZr,y=JmpEQ,out=jeq);
    And(x=aluPos,y=JmpGT,out=jgt);
    Or8Way(x[0]=jlt, x[1]=jeq, x[2]=jgt, x[3..7]=false, out=jmp);
    //End jumps

    //Registers
    ARegister(in=muxOut,load=loadA,out=aOut,out[0..14]=addressM);
    DRegister(in=aluOut,load=destD,out=dOut);
    // End registers

    Or(x=aInst,y=destA,out=loadA);
    Mux16(x=instruction,y=aluOut,sel=destA,out=muxOut);

    Mux16(x=aOut,y=inM,sel=srcM,out=muxOut2);
    ALU(x=dOut,y=muxOut2,zx=aluZx,nx=aluNx,zy=aluZy,ny=aluNy,f=aluF,no=aluNO,out=aluOut,out=outM, zr=aluZr,ng=aluNg);

    PC(x=aOut,load=jmp,inc=true,reset=reset,out[0..14]=pc);



}
